import telebot
from telebot import types

import time
import os
from prettytable import PrettyTable

from config import TOKEN_API
from DB import users_db, admin_users, products_db


bot = telebot.TeleBot(TOKEN_API, threaded=False)

users_db.users_table_create()
products_db.product_table_create()


def create_file_text_table(message, table):
    data_list = [list(data) for data in table]

    th = ["‚Ññ", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–í–∫—É—Å", "–û–±—ä–µ–º", "–¢–∏–ø", "–°—Ç—Ä–∞–Ω–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–¶–µ–Ω–∞"]
    td = data_list

    columns = len(th)

    table = PrettyTable(th)

    td_data = td[:]
    while td_data:
        table.add_rows(td_data[:columns])
        td_data = td_data[columns:]

    with open("table.txt", "w") as file:
        file.write(str(table))

    bot.send_document(message.chat.id, open("table.txt", "r"))

    os.remove("table.txt")


@bot.message_handler(commands=["start"])
def start_command(message):
    if users_db.user_check_in_db(message.from_user.id):
        user = (message.from_user.id,
                message.from_user.first_name,
                admin_users.user_check_on_admin(message.from_user.id))
        users_db.user_add_in_db(user)
    return menu_command(message)


@bot.message_handler(commands=["menu"])
def menu_command(message):
    if admin_users.user_check_on_admin(message.from_user.id) == "admin":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row('‚ûï\n–î–æ–±–∞–≤–∏—Ç—å', '‚úñ\n–£–¥–∞–ª–∏—Ç—å', '‚ôæ\n–ò–∑–º–µ–Ω–∏—Ç—å')
        markup.row('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏')
        markup.row('üë§ –û –Ω–∞—Å')
        return bot.send_message(message.chat.id, "<b>–ú–µ–Ω—é üìú</b>", parse_mode="HTML", reply_markup=markup)
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
        markup.row('üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏')
        markup.row('üë§ –û –Ω–∞—Å')
        return bot.send_message(message.chat.id, "<b>–ú–µ–Ω—é üìú</b>", parse_mode="HTML", reply_markup=markup)


@bot.message_handler(commands=["input"])
#New command input
def new_input_command(message):
    bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–µ, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å</b>\n<em>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ –≤—ã–≤–µ–¥–µ–Ω –Ω–∏–∂–µ, –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ</em>", parse_mode="HTML")
    bot.send_message(message.chat.id, "<b><em><code>–Ω–∞–∑–≤–∞–Ω–∏–µ|–≤–∫—É—Å|–æ–±—ä–µ–º|—Ç–∏–ø|—Å—Ç—Ä–∞–Ω–∞|–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ|—Ü–µ–Ω–∞</code></em></b>",
                     parse_mode="HTML")
    return bot.register_next_step_handler(message, new_validation_check)


def new_validation_check(message):
    new_product_list = message.text.replace(" ", "").upper().split("|")

    if str.isdigit(new_product_list[0]) or str.isdigit(new_product_list[1]) or str.isdigit(new_product_list[3]) or str.isdigit(new_product_list[4]):
        bot.send_message(message.chat.id, "<em>–ù–∞–∑–≤–∞–Ω–∏–µ, –≤–∫—É—Å, —Ç–∏–ø –∏–ª–∏ –∂–µ —Å—Ç—Ä–∞–Ω–∞</em>, <b>–ù–ï –Ø–í–õ–Ø–Æ–¢–°–Ø –¢–ï–ö–°–¢–û–ú!</b> ‚ùå", parse_mode="HTML")
        return menu_command(message)

    if False in (new_product_list[5].isdigit(), new_product_list[6].isdigit()):
        bot.send_message(message.chat.id, "<em>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ –∂–µ —Ü–µ–Ω–∞</em>, <b>–ù–ï –Ø–í–õ–Ø–Æ–¢–°–Ø –ß–ò–°–õ–ê–ú–ò!</b> ‚ùå", parse_mode="HTML")
        return menu_command(message)

    return new_product_list_push(message, new_product_list)


def new_product_list_push(message, new_product_list):
    if products_db.products_check_in_db(new_product_list):
        products_db.products_add_in_db(new_product_list)
        bot.send_message(message.chat.id, "<b>–¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω</b> ‚úÖ", parse_mode="HTML")
        return menu_command(message)
    else:
        bot.send_message(message.chat.id, "<em>–¢–∞–∫–æ–π —Ç–æ–≤–∞—Ä —É–∂–µ –∏–º–µ–µ—Ç—Å—è –≤ –±–∞–∑–µ, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ -></em><b>/‚ôæ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä</b> ‚ùå")
        return menu_command(message)


@bot.message_handler(commands=["delete"])
def delete_command(message):
    if products_db.select_all_in_table():
        bot.send_message(message.chat.id, "<b><em>–°–∫–ª–∞–¥ –ø—É—Å—Ç</em></b> üòÖ", parse_mode="HTML")
        return menu_command(message)
    else:
        create_file_text_table(message, products_db.select_all_in_table())
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å: ")
        return bot.register_next_step_handler(message, answer_delete)


def answer_delete(message):
    if message.text.isdigit():
        products_db.delete_row(message.text)
        bot.send_message(message.chat.id, "<b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω</b> ‚úÖ", parse_mode="HTML")
        return menu_command(message)
    else:
        bot.send_message(message.chat.id, "<b>–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ</b> ‚ùå", parse_mode="HTML")
        return menu_command(message)


@bot.message_handler(commands=["edit"])
def edit_command(message):
    if products_db.select_all_in_table():
        bot.send_message(message.chat.id, "<b><em>–°–∫–ª–∞–¥ –ø—É—Å—Ç</em></b> üòÖ", parse_mode="HTML")
        return menu_command(message)
    else:
        markup = types.InlineKeyboardMarkup()

        button_price = types.InlineKeyboardButton("–¶–µ–Ω—É", callback_data="price")
        button_amount = types.InlineKeyboardButton("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="amount")
        markup.add(button_price, button_amount)

        bot.send_message(message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–º–µ–Ω—è—Ç—å?", reply_markup=markup)


def answer_edit_row(message, value):
    if products_db.select_all_in_table():
        bot.send_message(message.chat.id, "<b><em>–°–∫–ª–∞–¥ –ø—É—Å—Ç</em></b> üòÖ", parse_mode="HTML")
        return menu_command(message)
    else:
        create_file_text_table(message, products_db.select_all_in_table())
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏–≤—Ä–æ–∞—Ç—å: ")
        return bot.register_next_step_handler(message, answer_edit, value)


def answer_edit(message, value):
    if message.text.isdigit():
        row_id = message.text
        bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ —á–∏—Å–ª–æ, –º–Ω–µ —Å–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ")
        return bot.register_next_step_handler(message, answer_edit_number, value, row_id)
    else:
        bot.send_message(message.chat.id, "<b>–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ</b> ‚ùå", parse_mode="HTML")
        return answer_edit_row(message, value)


def answer_edit_number(message, value, row_id):
    if message.text.isdigit():
        number = message.text
        return edit_successfully(message, value, row_id, number)
    else:
        bot.send_message(message.chat.id, "<b>–≠—Ç–æ –Ω–µ —Å–æ–≤—Å–µ–º —Ç–µ–∫—Å—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ</b> ‚ùå", parse_mode="HTML")
        return answer_edit(message, value)


def edit_successfully(message, value, row_id, number):
    products_db.update_row(value=value, row_id=row_id, number=number)
    return bot.send_message(message.chat.id, "<b>–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω</b> ‚úÖ", parse_mode="HTML")


@bot.message_handler(commands=["output"])
def output_command(message):
    return create_file_text_table(message, products_db.select_all_in_table())


def search_command(message):
    bot.send_message(message.chat.id, "<b>–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: </b>", parse_mode="HTML")
    return bot.register_next_step_handler(message, answer_search)


def answer_search(message):
    if products_db.select_name_in_table(message.text) is True:
        bot.send_message(message.chat.id, "<b><em>–í –¥—ã–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏</em></b> üòÖ",
                         parse_mode="HTML")
        return menu_command(message)
    else:
        return create_file_text_table(message, products_db.select_name_in_table(message.text))


@bot.message_handler(commands=["about"])
def about_command(message):
    return bot.send_message(message.chat.id, "<b>–û –Ω–∞—Å</b>: <em>–ú—ã - –Ω–µ–±–æ–ª—å—à–æ–π —Å–∫–ª–∞–¥, —Ç–æ—Ä–≥—É—é—â–∏–π –Ω–∞–ø–∏—Ç–∫–∞–º–∏ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º –î–∞–≥–µ—Å—Ç–∞–Ω–∞, –∞ —Ç–∞–∫–∂–µ –∑–∞ –µ–≥–æ –ø—Ä–µ–¥–µ–ª–∞–º–∏.\n\n</em><b>–ù–∞—à –ê–¥—Ä–µ—Å</b>: <em>–ú–∏–∞—Ç–ª–∏–Ω—Å–∫–∞—è 101 –ê\n\n</em><b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>: <em>–ú–∞—Ö–∞—á –ê–ª–¥–∞–º–æ–≤–∏—á \t---\t <code>+7 988 781-84-39</code></em>", parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: True)
def callback_command(call):
    if call.data == "menu_inl":
        menu_command(call.message)
    elif call.data == "price" or call.data == "amount":
        value = call.data
        answer_edit_row(call.message, value)


@bot.message_handler(content_types=["text"])
def reply_text(message):
    if message.text == "‚ûï\n–î–æ–±–∞–≤–∏—Ç—å":
        new_input_command(message)
    elif message.text == "‚úñ\n–£–¥–∞–ª–∏—Ç—å":
        delete_command(message)
    elif message.text == "‚ôæ\n–ò–∑–º–µ–Ω–∏—Ç—å":
        edit_command(message)
    elif message.text == "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä –≤ –Ω–∞–ª–∏—á–∏–∏":
        if products_db.select_all_in_table():
            bot.send_message(message.chat.id, "<b><em>–°–∫–ª–∞–¥ –ø—É—Å—Ç</em></b> üòÖ", parse_mode="HTML")
            return menu_command(message)
        else:
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)

            markup.row("üîé –ü–æ–∏—Å–∫", "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç")
            markup.row("‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")

            bot.send_message(message.chat.id, "<b>–ß—Ç–æ –¥–∞–ª—å—à–µ?</b>", parse_mode="HTML", reply_markup=markup)
    elif message.text == "üîé –ü–æ–∏—Å–∫":
        if products_db.select_all_in_table():
            bot.send_message(message.chat.id, "<b><em>–°–∫–ª–∞–¥ –ø—É—Å—Ç</em></b> üòÖ", parse_mode="HTML")
            return menu_command(message)
        else:
            search_command(message)
    elif message.text == "üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –≤–µ—Å—å –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç":
        if products_db.select_all_in_table():
            bot.send_message(message.chat.id, "<b><em>–°–∫–ª–∞–¥ –ø—É—Å—Ç</em></b> üòÖ", parse_mode="HTML")
            return menu_command(message)
        else:
            output_command(message)
    elif message.text == "‚¨Ö –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é":
        menu_command(message)
    elif message.text == "üë§ –û –Ω–∞—Å":
        about_command(message)

    else:
        markup = types.InlineKeyboardMarkup()

        button_menu = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="menu_inl")
        markup.add(button_menu)

        bot.send_message(message.chat.id, "<em>–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ <b>–º–µ–Ω—é</b></em>", parse_mode="HTML", reply_markup=markup)


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(15)
